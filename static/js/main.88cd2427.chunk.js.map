{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["monthDay","date","getMonth","getDate","join","BASE_URL","fetchData","_ref2","Object","asyncToGenerator","regenerator_default","a","mark","_callee","_ref","setLoading","setData","href","text","finalStructure","currentDay","wrap","_context","prev","next","fetch","concat","then","res","cheerio","load","$","attr","sent","html","replace","he","decode","split","map","line","test","console","log","forEach","push","shows","_line$match","match","_line$match2","slicedToArray","dateStr","Date","getFullYear","_line$match3","_line$match4","currentShow","isAsterisked","band","metadata","localStorage","sotwData","JSON","stringify","stop","_x","apply","this","arguments","initialState","parse","e","App","_useState","useState","_useState2","isLoading","_useState3","_useState4","data","aDayAgo","setTime","getTime","useEffect","PullToRefresh","init","mainElement","onRefresh","_onRefresh","_callee3","_context3","abrupt","Promise","resolve","fourHoursAgo","$el","document","querySelector","scrollIntoView","react_default","createElement","className","data-is-loading","filter","day","key","data-date","react_stickynode_default","enabled","top","innerZ","class","length","show","data-is-asterisked","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.88cd2427.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport he from 'he';\nimport PullToRefresh from 'pulltorefreshjs';\nimport Sticky from 'react-stickynode';\n\nimport cheerio from 'cheerio';\n\nimport './App.css';\n\nconst monthDay = (date) => {\n  if (!date) return '';\n\n  return [date.getMonth(), date.getDate()].join(':');\n}\n\nconst BASE_URL = 'https://cors-anywhere.herokuapp.com/https://groups.yahoo.com';\n\nconst fetchData = async ({ setLoading, setData }) => {\n  setLoading(true);\n\n  const href = await fetch(`${BASE_URL}/neo/groups/nyc_sotw/conversations/topics`)\n    .then(res => res.text())\n    .then(text => {\n      const $ = cheerio.load(text)\n\n      return $('#yg-msg-list a.yg-msg-link').attr('href');\n    });\n\n  const text = await fetch(`${BASE_URL}${href}`)\n    .then(res => res.text())\n    .then(text => {\n      const $ = cheerio.load(text);\n\n      return $('.msg-list-container li:last-child .msg-content').html().replace(/<(?:\\/?(span|a)).*?>/gm, '').replace(/<(?:.|\\n)*?>/gm, '\\n').replace(/\\n+/g, '\\n');\n    })\n    .then(text => he.decode(text))\n    .then(text =>\n      text.split('\\n')\n          .map(line =>\n            /:$/.test(line) ? `\\n${line}` : line\n          ).join('\\n')\n    );\n\n  const finalStructure = [];\n  let currentDay;\n\n  console.log('text', text);\n  text.split('\\n')\n    .forEach(line => {\n      if (!line) return;\n\n      if (/Nedar:$/.test(line)) {\n        if (currentDay) finalStructure.push(currentDay);\n\n        currentDay = { shows: [], line };\n      }\n      else if (/\\):$/.test(line)) {\n        if (currentDay) finalStructure.push(currentDay);\n\n        const [f, dateStr] = line.match(/\\((.+)\\)/);\n        const date = new Date(dateStr + '/' + new Date().getFullYear());\n        currentDay = { shows: [], line, date };\n      }\n\n      if (/@.+/.test(line) && currentDay) {\n        const [m, isAsterisked, band, metadata] = line.match(/(\\*)?(.+)@(.+)/);\n\n        const currentShow = {\n          line,\n          isAsterisked: !!isAsterisked,\n          band,\n          metadata,\n        };\n        currentDay.shows.push(currentShow);\n      }\n    });\n\n  if (currentDay) {\n    finalStructure.push(currentDay);\n  }\n\n  localStorage.sotwData = JSON.stringify(finalStructure);\n  setData(finalStructure);\n  setLoading(false);\n}\n\nlet initialState = [];\n\ntry {\n  initialState = JSON.parse(localStorage.sotwData);\n} catch (e) {\n  console.log('could not parse localstorage', e);\n}\n\nconst handleRefresh = ({ setLoading, setData }) => async (resolve) => {\n  await fetchData({ setLoading, setData });\n\n  resolve();\n}\n\nconst App = () => {\n  const [isLoading, setLoading] = useState(false);\n  const [data, setData] = useState(initialState);\n\n  const aDayAgo = new Date();\n\n  aDayAgo.setTime(aDayAgo.getTime() - (4*60*60*1000) - (24*60*60*1000));\n\n  useEffect(() => {\n    PullToRefresh.init({\n      mainElement: 'body',\n      async onRefresh() {\n        await fetchData({ setLoading, setData });\n\n        return Promise.resolve();\n      },\n    });\n\n    fetchData({ setLoading, setData });\n\n    // this so is at 2 - 4 am it still displays the shows for the previous day\n    const fourHoursAgo = new Date();\n\n    fourHoursAgo.setTime(fourHoursAgo.getTime() - (4*60*60*1000))\n    const $el = document.querySelector(`.day[data-date=\"${monthDay(fourHoursAgo)}\"]`)\n\n    $el && $el.scrollIntoView();\n  }, []);\n\n  return (\n    <div className=\"app\" data-is-loading={isLoading}>\n\n      {data.filter(day => day.date > aDayAgo).map(day =>\n        <div key={day.line} className=\"day\" data-date={monthDay(new Date(day.date))}>\n          <Sticky enabled={true} top={0} innerZ={1}>\n            <div class=\"day-title\">{day.line} {day.shows.length} shows</div>\n          </Sticky>\n\n          {day.shows.map(show =>\n            <div key={show.line} className=\"show\" data-is-asterisked={show.isAsterisked}>\n              <div className=\"band\">{show.isAsterisked ? '* ' : ''}{show.band}</div>\n              <div className=\"metadata\">@{show.metadata}</div>\n            </div>\n          )}\n        </div>\n      )}\n\n      <br />\n      <br />\n      <br />\n\n      {data && <p>\n        All shows are sourced by Neddyo @ <a href=\"https://groups.yahoo.com/neo/groups/nyc_sotw/info\">https://groups.yahoo.com/neo/groups/nyc_sotw/info</a>\n      </p>}\n\n      <br />\n      <br />\n\n      <a href=\"\">FORCE REFRESH</a>\n      <br />\n      <br />\n      <br />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\n\nimport './index.css';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}