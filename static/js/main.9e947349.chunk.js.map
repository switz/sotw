{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["BASE_URL","App","data","_useState","useState","localStorage","sotwData","_useState2","Object","slicedToArray","setData","useEffect","asyncToGenerator","regenerator_default","a","mark","_callee","href","text","wrap","_context","prev","next","fetch","concat","then","res","JSDOM","window","document","querySelector","sent","dom","console","log","innerHTML","stop","fetchData","react_default","createElement","className","react_safe_default","div","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9e947349.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Safe from 'react-safe';\nimport { JSDOM } from 'jsdom';\n\nimport './App.css';\n\nconst BASE_URL = 'https://cors-anywhere.herokuapp.com/https://groups.yahoo.com';\n\n\nconst fetchData = () => {\n  const [data, setData] = useState(localStorage.sotwData || '');\n\n  useEffect(() => {\n    (async () => {\n      const href = await fetch(`${BASE_URL}/neo/groups/nyc_sotw/conversations/topics`)\n        .then(res => res.text())\n        .then(text => {\n          const dom = new JSDOM(text)\n\n          return dom.window.document.querySelector('#yg-msg-list a.yg-msg-link').href;\n        });\n\n      const text = await fetch(`${BASE_URL}${href}`)\n        .then(res => res.text())\n        .then(text => {\n          const dom = new JSDOM(text)\n\n          console.log(dom)\n          return dom.window.document.querySelector('.msg-content').innerHTML;\n        })\n\n      localStorage.sotwData = text;\n      setData(text)\n    })();\n  }, []);\n\n  return data;\n}\n\nconst App = () => {\n  const data = fetchData();\n\n  return (\n    <div className=\"app\">\n      <a href=\"/\">Refresh</a>\n\n      <br />\n      <br />\n\n      <Safe.div>{data}</Safe.div>\n\n      {data && <p>\n        All shows are sourced by Neddyo @ <a href=\"https://groups.yahoo.com/neo/groups/nyc_sotw/info\">https://groups.yahoo.com/neo/groups/nyc_sotw/info</a>\n      </p>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}