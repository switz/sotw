{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["monthDay","date","getMonth","getDate","join","fetchData","_ref2","Object","asyncToGenerator","regenerator_default","a","mark","_callee","_ref","setLoading","setData","finalStructure","wrap","_context","prev","next","fetch","then","res","json","items","sent","stop","_x","apply","this","arguments","initialState","JSON","parse","localStorage","sotwData","e","console","log","App","_useState","useState","_useState2","slicedToArray","isLoading","_useState3","_useState4","data","aDayAgo","Date","setTime","getTime","useEffect","PullToRefresh","init","mainElement","onRefresh","_onRefresh","_callee3","_context3","abrupt","Promise","resolve","fourHoursAgo","$el","document","querySelector","concat","scrollIntoView","react_default","createElement","className","data-is-loading","filter","day","map","key","line","data-date","react_stickynode_default","enabled","top","innerZ","shows","length","show","data-is-asterisked","isAsterisked","band","metadata","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4fe31705.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport he from 'he';\nimport PullToRefresh from 'pulltorefreshjs';\nimport Sticky from 'react-stickynode';\n\nimport cheerio from 'cheerio';\n\nimport './App.css';\n\nconst monthDay = (date) => {\n  if (!date) return '';\n\n  return [date.getMonth(), date.getDate()].join(':');\n};\n\nconst URL = 'https://20iikcfmr1.execute-api.us-east-1.amazonaws.com/default/sotw-dev-hello';\n\nconst fetchData = async ({ setLoading, setData }) => {\n  setLoading(true);\n\n  const finalStructure = await fetch(URL)\n    .then(res => res.json())\n    .then(json => json.items);\n\n  setData(finalStructure);\n  setLoading(false);\n};\n\nlet initialState = [];\n\ntry {\n  initialState = JSON.parse(localStorage.sotwData);\n} catch (e) {\n  console.log('could not parse localstorage', e);\n}\n\nconst handleRefresh = ({ setLoading, setData }) => async (resolve) => {\n  await fetchData({ setLoading, setData });\n\n  resolve();\n};\n\nconst App = () => {\n  const [isLoading, setLoading] = useState(false);\n  const [data, setData] = useState(initialState);\n\n  const aDayAgo = new Date();\n\n  console.log(data)\n\n  aDayAgo.setTime(aDayAgo.getTime() - (4*60*60*1000) - (24*60*60*1000));\n\n  useEffect(() => {\n    PullToRefresh.init({\n      mainElement: 'body',\n      async onRefresh() {\n        await fetchData({ setLoading, setData });\n\n        return Promise.resolve();\n      },\n    });\n\n    fetchData({ setLoading, setData });\n\n    // this so is at 2 - 4 am it still displays the shows for the previous day\n    const fourHoursAgo = new Date();\n\n    fourHoursAgo.setTime(fourHoursAgo.getTime() - (4*60*60*1000));\n    const $el = document.querySelector(`.day[data-date=\"${monthDay(fourHoursAgo)}\"]`);\n\n    $el && $el.scrollIntoView();\n  }, []);\n\n  return (\n    <div className=\"app\" data-is-loading={isLoading}>\n\n      {data.filter(day => new Date(day.date) > aDayAgo).map(day =>\n        <div key={day.line} className=\"day\" data-date={monthDay(new Date(day.date))}>\n          <Sticky enabled={true} top={0} innerZ={1}>\n            <div className=\"day-title\">{day.line} {day.shows.length} shows</div>\n          </Sticky>\n\n          {day.shows.map(show =>\n            <div key={show.line} className=\"show\" data-is-asterisked={show.isAsterisked}>\n              <div className=\"band\">{show.isAsterisked ? '* ' : ''}{show.band}</div>\n              <div className=\"metadata\">@{show.metadata}</div>\n            </div>\n          )}\n        </div>\n      )}\n\n      <br />\n      <br />\n      <br />\n\n      {data && <p>\n        All shows are sourced by Neddyo @ <a href=\"https://groups.yahoo.com/neo/groups/nyc_sotw/info\">https://groups.yahoo.com/neo/groups/nyc_sotw/info</a>\n      </p>}\n\n      <br />\n      <br />\n\n      <a href=\"\">FORCE REFRESH</a>\n      <br />\n      <br />\n      <br />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\n\nimport './index.css';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}